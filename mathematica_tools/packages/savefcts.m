(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)

BeginPackage["savefcts`"]

savefunc::usage=" save results";
saveSn::usage=" save expressions for a given Sn term";
(*getCfct::usage=" C code in global context";*)

Begin["`Private`"]
Get[NotebookDirectory[]<>"globalvars.m"] ;
(*Save output in a format that's easy to use in C code*)

savefunc[SM0_,UnSM0_,Symdivergences0_,UnSymdivergences0_,biases0_]:=Module[{SM=SM0,UnSM=UnSM0,Symdivergences=Symdivergences0,UnSymdivergences=UnSymdivergences0,biases=biases0},
n=Length[SM];
fileName="savefile.txt";
Export[fileName,""];
file=OpenAppend[fileName,PageWidth->Infinity];

For[b=1,b<Length[biases]+1,b++,
tosave="nu"<>ToString[b]<>"="<>ToString[CForm[biases[[b]]]]<>";";
WriteString[file,tosave,"\n"];
];

saveMdata[dataname0_,datamatr0_]:=Module[{dataname=dataname0,datamatr=datamatr0},
For[i=1,i<n+1,i++,For[j=1,j<n+1,j++,
datai=datamatr[[i,j]]/. x_Integer:>N[x];
term=dataname<>ToString[i]<>","<>ToString[j]<>"]";

tosave=term<>"="<>ToString[CForm[datai]]<>";";
WriteString[file,tosave,"\n"]
];];
];
saveMdata["Sym",SM];
saveMdata["UnSym",UnSM];
saveMdata["SymDivs",Symdivergences];
saveMdata["UnSymDivs",UnSymdivergences];

Close[file];
];
 
numberToLetter[n_]:=FromCharacterCode[64+n];

getHfct[fctname_]:="double complex "<>ToString[fctname]<>"(double complex nu1, double complex nu2,struct pars_struct *pars);\n";

getCfct[fctname_,fctreturn_]:=CFunction[{"double","complex"},fctname,{{"double","complex" ,"nu1"},{"double","complex" ,"nu2"},{"struct", "pars_struct*","pars"}},{CReturn[fctreturn] }]//ToCCodeString ;


saveSn[ni0_,SM0_,UnSM0_,Symdivergences0_,UnSymdivergences0_,biases0_]:=Module[{ni=ni0,SM=SM0,UnSM=UnSM0,Symdivergences=Symdivergences0,UnSymdivergences=UnSymdivergences0,biases=biases0},

Needs["SymbolicC`"];
n=Length[SM];
filelocation=ParentDirectory[NotebookDirectory[],2]<>"/skew_spectra_fftlog";
Cfile=filelocation<>"/src/Snfunctions.c";
Hfile=filelocation<>"/include/Snfunctions.h";
includes=Table["#include "<>i,{i,{"\"../include/class_funcs.h\"","<stdio.h>","<complex.h>"}}];

Hinit=Join[includes,{"\n#ifndef SNFUNCTIONS","#define SNFUNCTIONS\n\n"}];
Cinit={"#include \"Snfunctions.h\"\n\n"};

parsreplace=Table[cstsi->"pars->"<>cstsi,{cstsi,{"b1","b2","bg2","f"}}];
rules=Join[parsreplace,{"k0"->"pars->k","n1"->"nu1","n2"->"nu2","\""->"","Pi"->"M_PI","PI"->"M_PI"}];
replacerules=StringReplace[rules];

Ccontent={};Hcontent={};

For[j=1,j<n,j++,For[s=1,s<3,s++,

fname="S"<>ToString[ni]<>"_"<>ToString[j]<>{"sym","unsym"}[[s]];
fctdata={SM,UnSM}[[s,ni,j]];

For[fi=1,fi<Length[fctdata]+1,fi++,
fcontent=fctdata[[fi]]//CForm //ToString//replacerules;
extension=If[Length[fctdata]>1,numberToLetter[fi],""];

AppendTo[Ccontent,Global`getCfct[fname<>extension,fcontent]];
AppendTo[Hcontent,getHfct[fname<>extension]];

];];];
Hcontent=StringRiffle[Join[Hinit,Flatten[Hcontent],{"\n#endif"}],"\n"];

Ccontent=StringRiffle[Join[Cinit,Ccontent],"\n"];


WriteString[Hfile,Hcontent];
Close[Hfile];

WriteString[Cfile,Ccontent];
Close[Cfile];

Print["Saving completed"];
]

End[] 
 
EndPackage[]



